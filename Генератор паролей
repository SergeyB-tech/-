#имопртируем библиотеки
import random
import string

def generate_password(length, use_uppercase, use_lowercase, use_digits, use_special):
    characters = ''
    
    if use_uppercase:
        characters += string.ascii_uppercase
    if use_lowercase:
        characters += string.ascii_lowercase
    if use_digits:
        characters += string.digits
    if use_special:
        characters += '!@#$%^&*'
    
    if not characters:
        raise ValueError("Не выбрано ни одного типа символов для генерации пароля")
    
    password = ''.join(random.choice(characters) for _ in range(length))
    return password

def get_yes_no_input(prompt):
    while True:
        response = input(prompt).strip().lower()
        if response in ('y', 'yes', 'д', 'да'):
            return True
        elif response in ('n', 'no', 'н', 'нет'):
            return False
        else:
            print("Пожалуйста, введите 'да' или 'нет' (y/n)")

def get_positive_integer(prompt):
    while True:
        try:
            value = int(input(prompt))
            if value <= 0:
                print("Пожалуйста, введите положительное число")
            else:
                return value
        except ValueError:
            print("Пожалуйста, введите целое число")

def main():
    print("=== Генератор случайных паролей ===")
    
    length = get_positive_integer("Введите длину пароля: ")
    use_uppercase = get_yes_no_input("Включать заглавные буквы (A-Z)? [y/n]: ")
    use_lowercase = get_yes_no_input("Включать строчные буквы (a-z)? [y/n]: ")
    use_digits = get_yes_no_input("Включать цифры (0-9)? [y/n]: ")
    use_special = get_yes_no_input("Включать специальные символы (!@#$%^&*)? [y/n]: ")
    
    try:
        password = generate_password(
            length=length,
            use_uppercase=use_uppercase,
            use_lowercase=use_lowercase,
            use_digits=use_digits,
            use_special=use_special
        )
        print("\nСгенерированный пароль:", password)
    except ValueError as e:
        print("\nОшибка:", e)

if __name__ == "__main__":
    main()
